name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -timeout 10m ./...

  build:
    name: Build Release Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
            name: "Linux x86_64"
          - goos: darwin
            goarch: arm64
            suffix: ""
            name: "macOS ARM64"
          - goos: windows
            goarch: amd64
            suffix: ".exe"
            name: "Windows x86_64"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release
        if [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"rc"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="linktadoru-${{ steps.version.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        
        go build \
          -trimpath \
          -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -s -w" \
          -o "$BINARY_NAME" \
          ./cmd/crawler
        
        # Create checksum
        if command -v sha256sum >/dev/null; then
          sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        else
          shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
        fi
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "linktadoru-${{ steps.version.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip" \
            "$BINARY_NAME" "$BINARY_NAME.sha256" README.md LICENSE
        else
          tar czf "linktadoru-${{ steps.version.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" \
            "$BINARY_NAME" "$BINARY_NAME.sha256" README.md LICENSE
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linktadoru-${{ steps.version.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          linktadoru-${{ steps.version.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 5

  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release
        if [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"rc"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release
        find artifacts -name "linktadoru-*" -type f | while read file; do
          cp "$file" release/
        done
        ls -la release/

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
        fi
        
        cat > release_notes.md << EOF
        ## Changes in ${{ steps.version.outputs.tag }}
        
        $COMMITS
        
        ## Downloads
        
        Choose the appropriate binary for your platform:
        
        - **Linux x86_64**: \`linktadoru-${{ steps.version.outputs.tag }}-linux-amd64.tar.gz\`
        - **macOS ARM64**: \`linktadoru-${{ steps.version.outputs.tag }}-darwin-arm64.tar.gz\`
        - **Windows x86_64**: \`linktadoru-${{ steps.version.outputs.tag }}-windows-amd64.zip\`
        
        ## Installation
        
        ### Linux / macOS
        \`\`\`bash
        # Extract the archive
        tar xzf linktadoru-${{ steps.version.outputs.tag }}-linux-amd64.tar.gz
        
        # Verify checksum
        sha256sum -c linktadoru-${{ steps.version.outputs.tag }}-linux-amd64.sha256
        
        # Make executable and test
        chmod +x linktadoru-${{ steps.version.outputs.tag }}-linux-amd64
        ./linktadoru-${{ steps.version.outputs.tag }}-linux-amd64 --version
        \`\`\`
        
        ### Windows
        \`\`\`powershell
        # Extract the zip file
        Expand-Archive linktadoru-${{ steps.version.outputs.tag }}-windows-amd64.zip
        
        # Test the binary
        .\\linktadoru-${{ steps.version.outputs.tag }}-windows-amd64.exe --version
        \`\`\`
        
        ### Using Go
        \`\`\`bash
        go install github.com/masahif/linktadoru/cmd/crawler@${{ steps.version.outputs.tag }}
        \`\`\`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: release/*
        prerelease: ${{ steps.version.outputs.prerelease }}
        draft: false

  docker:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}