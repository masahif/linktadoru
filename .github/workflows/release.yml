name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  GO_VERSION: '1.23'

jobs:

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies and run tests
      run: |
        make deps
        make test-ci

  build:
    name: Build Release Binaries
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build all platforms
      run: make release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: dist/
        retention-days: 5

  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release
        if [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"rc"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries
        path: release

    - name: List release files
      run: ls -la release/

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
        fi
        
        cat > release_notes.md << EOF
        ## Changes in ${{ steps.version.outputs.tag }}
        
        $COMMITS
        
        ## Downloads
        
        Choose the appropriate binary for your platform:
        
        - **Linux x86_64**: \`linktadoru-linux-amd64\`
        - **Linux ARM64**: \`linktadoru-linux-arm64\`
        - **macOS ARM64**: \`linktadoru-darwin-arm64\`
        - **Windows x86_64**: \`linktadoru-windows-amd64.exe\`
        
        ## Installation
        
        ### Linux / macOS
        \`\`\`bash
        # Download and make executable
        chmod +x linktadoru-linux-amd64
        ./linktadoru-linux-amd64 --version
        \`\`\`
        
        ### Windows
        \`\`\`powershell
        # Test the binary
        .\\linktadoru-windows-amd64.exe --version
        \`\`\`
        
        ### Using Go
        \`\`\`bash
        go install github.com/masahif/linktadoru/cmd/crawler@${{ steps.version.outputs.tag }}
        \`\`\`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: release/*
        prerelease: ${{ steps.version.outputs.prerelease }}
        draft: false

